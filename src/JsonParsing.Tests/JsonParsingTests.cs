using System.Collections.Generic;
using System.Linq;
using JsonParsing;
using Xunit;

namespace JsonParsing.Tests
{
    public class UnitTest1
    {
        [Fact]
        public void BidBooksParsing()
        {
            var BidUpdate = "[2304," +
                            "{\"b\":[" +
                            "[\"59982.60000\",\"0.00000000\",\"1615659366.987998\"]," +
                            "[\"58021.00000\",\"0.00132225\",\"1615630366.684636\",\"r\"]" +
                            "]," +
                            "\"c\":\"675648105\"}," +
                            "\"book-100\"," +
                            "\"XBT/USDT\"]";
            var book = new Book(BidUpdate);

            var l1 = new List<string> {"59982.60000", "0.00000000", "1615659366.987998"};
            var l2 = new List<string> {"58021.00000", "0.00132225", "1615630366.684636", "r"};
            var ls = new List<LevelTuple> {new(l1), new(l2)};
            var expected = new Book(channelId: 2304, pair: "XBT/USDT", channelName: "book-100",
                asks: new List<LevelTuple>(), bids: ls,
                checksum: "675648105", update: true);
            Assert.Equal(expected, book);
            Assert.NotNull(book.Asks);

        }

        [Fact]
        public void AskBooksParsing()
        {
            var AskUpdate = "[2304," +
                            "{\"a\":[" +
                            "[\"59982.60000\",\"0.00000000\",\"1615659366.987998\"]," +
                            "[\"58021.00000\",\"0.00132225\",\"1615630366.684636\",\"r\"]" +
                            "]," +
                            "\"c\":\"675648105\"}," +
                            "\"book-100\"," +
                            "\"XBT/USDT\"]";
            var book = new Book(AskUpdate);

            var l1 = new List<string> {"59982.60000", "0.00000000", "1615659366.987998"};
            var l2 = new List<string> {"58021.00000", "0.00132225", "1615630366.684636", "r"};
            var ls = new List<LevelTuple> {new(l1), new(l2)};
            var expected = new Book(channelId: 2304, pair: "XBT/USDT", channelName: "book-100",
                asks: ls, bids: new List<LevelTuple>(),
                checksum: "675648105", update: true);
            Assert.Equal(expected, book);
            Assert.NotNull(book.Bids);
        }

        [Fact]
        public void AskBidBooksParsing()
        {
            var Update = "[2304," +
                         "{\"a\":[" +
                         "[\"59982.60000\",\"0.00000000\",\"1615659366.987998\"]," +
                         "[\"58021.00000\",\"0.00132225\",\"1615630366.684636\",\"r\"]" +
                         "]}," +
                         "{\"b\":[" +
                         "[\"59982.60000\",\"0.00000000\",\"1615659366.987998\"]," +
                         "[\"58021.00000\",\"0.00132225\",\"1615630366.684636\",\"r\"]" +
                         "]," +
                         "\"c\":\"675648105\"}," +
                         "\"book-100\"," +
                         "\"XBT/USDT\"]";
            var book = new Book(Update);

            var l1 = new List<string> {"59982.60000", "0.00000000", "1615659366.987998"};
            var l2 = new List<string> {"58021.00000", "0.00132225", "1615630366.684636", "r"};
            var ls = new List<LevelTuple> {new(l1), new(l2)};
            var expected = new Book(channelId: 2304, pair: "XBT/USDT", channelName: "book-100",
                asks: ls, bids: ls,
                checksum: "675648105", update: true);
            Assert.Equal(expected, book);
        }

        [Fact]
        public void SnapShotParsing()
        {
            var Snapshot =
                "[2304," +
                "{\"as\":[" +
                "[\"61074.90000\",\"0.03300000\",\"1615680100.357494\"]," +
                "[\"61076.90000\",\"0.15000000\",\"1615680100.316398\"]," +
                "[\"61083.90000\",\"0.08189270\",\"1615680100.270453\"]," +
                "[\"61091.90000\",\"0.03226286\",\"1615680094.993643\"]," +
                "[\"61092.00000\",\"0.15000000\",\"1615680093.894549\"]," +
                "[\"61093.20000\",\"0.12283571\",\"1615680097.383483\"]," +
                "[\"61097.90000\",\"0.06983296\",\"1615680100.335221\"]," +
                "[\"61098.00000\",\"0.20000000\",\"1615680095.828050\"]," +
                "[\"61100.40000\",\"0.08446000\",\"1615680089.209693\"]," +
                "[\"61102.50000\",\"0.12281758\",\"1615680091.383754\"]" +
                "]," +
                "\"bs\":[" +
                "[\"61064.70000\",\"0.08189044\",\"1615680096.384581\"]," +
                "[\"61059.70000\",\"0.16360772\",\"1615680058.895440\"]," +
                "[\"61047.20000\",\"0.12282923\",\"1615680094.966206\"]," +
                "[\"61033.00000\",\"0.10000000\",\"1615680098.967141\"]," +
                "[\"61032.80000\",\"0.10000000\",\"1615680099.376576\"]," +
                "[\"61028.70000\",\"0.30000000\",\"1615680099.363348\"]," +
                "[\"61028.60000\",\"0.16371139\",\"1615680084.251615\"]," +
                "[\"61025.80000\",\"0.03411080\",\"1615680091.509969\"]," +
                "[\"61025.30000\",\"0.16371961\",\"1615680085.974857\"]," +
                "[\"61023.90000\",\"0.00474282\",\"1615680072.457932\"]" +
                "]}," +
                "\"book-10\"," +
                "\"XBT/USDT\"]";

            var book = new Book(Snapshot);
            var asks = new List<List<string>>
            {
                new() {"61074.90000", "0.03300000", "1615680100.357494"},
                new() {"61076.90000", "0.15000000", "1615680100.316398"},
                new() {"61083.90000", "0.08189270", "1615680100.270453"},
                new() {"61091.90000", "0.03226286", "1615680094.993643"},
                new() {"61092.00000", "0.15000000", "1615680093.894549"},
                new() {"61093.20000", "0.12283571", "1615680097.383483"},
                new() {"61097.90000", "0.06983296", "1615680100.335221"},
                new() {"61098.00000", "0.20000000", "1615680095.828050"},
                new() {"61100.40000", "0.08446000", "1615680089.209693"},
                new() {"61102.50000", "0.12281758", "1615680091.383754"}
            };
            var bids = new List<List<string>>
            {
                new() {"61064.70000", "0.08189044", "1615680096.384581"},
                new() {"61059.70000", "0.16360772", "1615680058.895440"},
                new() {"61047.20000", "0.12282923", "1615680094.966206"},
                new() {"61033.00000", "0.10000000", "1615680098.967141"},
                new() {"61032.80000", "0.10000000", "1615680099.376576"},
                new() {"61028.70000", "0.30000000", "1615680099.363348"},
                new() {"61028.60000", "0.16371139", "1615680084.251615"},
                new() {"61025.80000", "0.03411080", "1615680091.509969"},
                new() {"61025.30000", "0.16371961", "1615680085.974857"},
                new() {"61023.90000", "0.00474282", "1615680072.457932"}
            };
            var expected = new Book(channelId: 2304, pair: "XBT/USDT", channelName: "book-10",
                asks: asks.Select(tup => new LevelTuple(tup)),
                bids: bids.Select(tup => new LevelTuple(tup)),
                checksum: "", update: false);
            Assert.Equal(expected, book);
        }
    }
}